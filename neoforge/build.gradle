plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

dependencies {
    implementation("foundry.veil:veil-neoforge-${project.minecraft_version}:${project.veil_version}") {
        exclude group: "maven.modrinth"
    }

    compileOnly("cc.tweaked:cc-tweaked-1.21-forge-api:1.111.0")
    implementation("cc.tweaked:cc-tweaked-1.21-forge:1.111.0")

    compileOnly "mezz.jei:jei-${project.minecraft_version}-neoforge-api:${project.jei_version}"
    runtimeOnly("mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}")

//    modRuntimeOnly("me.djtheredstoner:DevAuth-neoforge-latest:1.2.1")
    //modRuntimeOnly("maven.modrinth:spark:1.10.53-forge")
    //modRuntimeOnly("curse.maven:worldedit-225608:4586218")
    //modRuntimeOnly("mezz.jei:jei-${rootProject.property("minecraft_version")}-forge:${rootProject.property("jei_version")}")
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }